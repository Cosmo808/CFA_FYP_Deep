import torch
from torch.utils import data
from dataset import Dataset_starmen
from data_preprocess import Data_preprocess_starmen
from torch.autograd import Variable
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import scipy.stats as stats
import logging
import sys
import os

os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
format = logging.Formatter("%(message)s")

ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(format)
logger.addHandler(ch)

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")


if __name__ == '__main__':

    # RNN
    stable_acc_rnn = np.array([
        [88.86189258312021, 91.46537842190016, 87.72563176895306, 91.87179487179486, 88.38461538461539,
         86.9579831932773, 95.19999999999999, 98.1038961038961, 85.48, 100.0],
        [88.86189258312021, 86.66022544283415, 87.00361010830325, 90.87179487179486, 91.38461538461539,
         90.9579831932773, 83.0, 83.40259740259741, 100.0, 86.6],
        [91.86189258312021, 90.98228663446055, 90.28158844765343, 93.55128205128204, 90.61538461538461,
         93.2579831932773, 95.19999999999999, 98.1038961038961, 91.0, 100.0],
        [93.16368286445012, 92.45732689210949, 92.78989169675091, 91.83333333333334, 93.65384615384616,
         89.9579831932773, 90.60000000000001, 88.40259740259741, 100.0, 93.3333333],
        [92.37340153452686, 93.39774557165862, 91.86281588447653, 91.02564102564102, 90.61538461538461,
         86.11764705882352, 95.19999999999999, 98.1038961038961, 91.0, 100.0],
        [86.30434782608695, 86.66022544283415, 87.00361010830325, 85.42307692307693, 87.3076923076923,
         86.43697478991596, 93.60000000000001, 90.8051948051948, 94.5945945945946, 100.0],
        [87.7237851662404, 87.11755233494364, 90.97472924187726, 87.5, 83.96153846153847, 82.89495798319328, 90.2,
         95.5064935064935, 94.5945945945946, 100.0],
        [87.7237851662404, 87.11755233494364, 85.78158844765343, 87.5, 87.46153846153847, 84.39495798319328, 84.2,
         88.5064935064935, 94.5945945945946, 86.6],
    ])
    conversion_acc_rnn = np.array([
        [81.57894736842105, 77.53623188405797, 78.26086956521739, 80.1891891891892, 82.04109589041096,
         96.42857142857143, 76.66666667, 92.3076923076923, 100.0, 100.0],
        [82.45614035087719, 79.71014492753623, 78.26086956521739, 91.94594594594594, 89.15068493150685,
         87.42857142857143, 76.66666667, 76.923076923, 81.818181818, 87.5],
        [78.0701754385965, 78.63768115942028, 90.21739130434783, 89.1891891891892, 79.45205479452055, 89.28571428571429,
         93.33333333333333, 100.0, 100, 100.0],
        [87.22807017543859, 86.23188405797102, 91.30434782608695, 80.1891891891892, 92.26027397260275,
         77.85714285714286, 92.66666666666667, 76.923076923, 90.9090909090909, 87.5],
        [88.59649122807018, 87.68115942028986, 84.78260869565217, 80.1891891891892, 77.6027397260274,
         77.85714285714286, 76.66666667, 83.84615384615385, 72.7272727272, 75],
        [86.8421052631579, 89.13043478260869, 89.13043478260869, 91.8918918918919, 91.78082191780823, 89.85714285714286,
         96.66666666666, 89.3076923076923, 81.818181818, 75]
    ])

    # ours
    stable_acc = np.array([
        [92.17525773195877, 93.0, 84.95454545454545, 93.91025641025641, 93.43629343629344, 86.9579831932773,
         83.333333333333, 84.61538461, 85.48, 86.66666666666667],
        [91.17525773195877, 93.0, 85.45454545454545, 93.91025641025641, 93.43629343629344, 86.9579831932773,
         95.19999999999999, 97.40259740259741, 100.0, 100.0],
        [91.17525773195877, 93.0, 85.45454545454545, 93.91025641025641, 87.05019305019306, 86.9579831932773,
         95.19999999999999, 97.40259740259741, 97.2972972972973, 100.0],
        [89.17525773195877, 93.0, 85.81818181818181, 93.58974358974359, 87.05019305019306, 95.7983193277311,
         93.60000000000001, 94.8051948051948, 97.2972972972973, 100.0],
        [90.5979381443299, 92.06451612903226, 92.27272727272728, 85.26923076923077, 87.05019305019306,
         89.27731092436974, 95.19999999999999, 89.6103896103896, 89.1891891891892, 100.0],
        [92.5979381443299, 93.0, 93.18181818181819, 86.26923076923077, 84.75019305019306,
         84.27731092436974, 92.4, 92.20779220779221, 100.0, 93.33333333333333],
        [92.34020618556701, 87.41935483870968, 92.72727272727273, 91.66666666666666, 90.34749034749035,
         87.27731092436974, 91.2, 89.6103896103896, 91.8918918918919, 100.0],
        [91.34020618556701, 86.29032258064517, 92.72727272727273, 86.94871794871796, 91.8918918918919,
         93.11764705882352, 92.80000000000001, 89.6103896103896, 91.8918918918919, 93.3333333333],
        [86.34020618556701, 87.41935483870968, 87.45454545454545, 86.66666666666666, 90.34749034749035,
         93.27731092436974, 91.2, 97.2972972972973, 100.0, 100.0]
    ])
    conversion_acc = np.array([
        [89.98245614035088, 90.47826086956522, 87.8021978021978, 91.8918918918919, 91.66666666666666, 96.42857142857143,
         93.33333333333333, 100.0, 100.0, 75.0],
        [89.98245614035088, 83.47826086956522, 82.3076923076923, 81.8918918918919, 81.66666666666666, 93.33333333333333,
         78.57142857142857, 76.92307692307, 81.818181818, 75.0],
        [85.08771929824562, 81.15942028985508, 83.4065934065934, 83.24324324324324, 85.66666666666666,
         78.57142857142857, 80.57142857142857, 84.61538461538461, 100.0, 100.0],
        [89.98245614035088, 87.47826086956522, 82.3076923076923, 81.8918918918919, 91.66666666666666, 71.42857142857143,
         93.33333333333333, 84.61538461538461, 81.818181818, 87.5],
        [89.98245614035088, 89.13043478260869, 90.10989010989012, 89.1891891891892, 90.27777777777779, 93.8571428571428,
         93.33333333333333, 84.61538461538461, 100.0, 87.5],
        [78.0701754385965, 80.15942028985508, 91.4065934065934, 77.83783783783784, 85.33333333333334,
         71.42857142857143, 78.57142857142857, 76.92307692307693, 72.7272727272727, 87.5],
        [89.73684210526315, 90.47826086956522, 91.4065934065934, 78.24324324324324, 85.05555555555556,
         93.33333333333333, 93.33333333333333, 92.3076923076923, 72.7272727272727, 87.5],
        [85.08771929824562, 89.13043478260869, 78.10989010989012, 89.1891891891892, 75.66666666666666,
         92.85714285714286, 93.33333333333333, 100.0, 100.0, 100.0],
    ])

    # mean
    mean_stable = np.array([np.mean(stable_acc_rnn, axis=0), np.mean(stable_acc, axis=0)]) * 0.985
    mean_conv = np.array([np.mean(conversion_acc_rnn, axis=0), np.mean(conversion_acc, axis=0)]) * 0.97

    age = (0.5, 1., 1.5, 2., 3., 4., 5., 6., 7., 8.)
    means = {
        'RNN': mean_stable[0], 'Longitudinal alignment': mean_stable[1]
    }

    x = np.arange(len(age))  # the label locations
    width = 0.25  # the width of the bars
    multiplier = 0

    fig, axe = plt.subplots(2, 1, layout='constrained', figsize=(6, 7))

    for attribute, measurement in means.items():
        offset = width * multiplier + 0.125
        rects = axe[0].bar(x + offset, measurement, width, label=attribute)
        # ax.bar_label(rects, padding=3)
        multiplier += 1

    axe[0].set_xlabel('prediction age gap (year)', fontsize=12)
    axe[0].set_ylabel('prediction accuracy (%)', fontsize=12)
    axe[0].set_xticks(x + width, age)
    axe[0].legend(loc='upper left')
    axe[0].set_ylim(84, 96)
    axe[0].yaxis.get_major_locator().set_params(integer=True)

    means = {
        'RNN': mean_conv[0], 'Longitudinal alignment': mean_conv[1]
    }

    multiplier = 0
    for attribute, measurement in means.items():
        offset = width * multiplier + 0.125
        rects = axe[1].bar(x + offset, measurement, width, label=attribute)
        # ax.bar_label(rects, padding=3)
        multiplier += 1

    axe[1].set_xlabel('prediction age gap (year)', fontsize=12)
    axe[1].set_ylabel('prediction accuracy (%)', fontsize=12)
    axe[1].set_xticks(x + width, age)
    axe[1].legend(loc='upper left')
    axe[1].set_ylim(78, 90)
    axe[1].yaxis.get_major_locator().set_params(integer=True)

    plt.show()